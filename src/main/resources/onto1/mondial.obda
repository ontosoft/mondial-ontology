[PrefixDeclaration]
:		http://www.example.org/monidal.owl#
owl:		http://www.w3.org/2002/07/owl#
rdf:		http://www.w3.org/1999/02/22-rdf-syntax-ns#
xsd:		http://www.w3.org/2001/XMLSchema#
rdfs:		http://www.w3.org/2000/01/rdf-schema#

[SourceDeclaration]
sourceUri	mundial
connectionUrl	jdbc:postgresql://localhost:5432/mondial
username	postgres
password	sa
driverClass	org.postgresql.Driver

[MappingDeclaration] @collection [[
mappingId	cl_Country
target		:country/{code} a :Country ; :countryCode {code} ; :countryName {name} ; :countryPopulation {population} ; :countryArea {area} . 
source		select "code", "name","population","area" from "country"

mappingId	cl_City
target		:city/{country}/{province}/{name} a :City ; :cityName {name} ; :cityPopulation {population} ; :cityLongitude {longitude} . 
source		select country, province, name, population, longitude, latitude from city

mappingId	op_cityInProvince
target		:city/{country}/{province}/{name} :cityInProvince :province/{country}/{province} . 
source		select name,province,country from city

mappingId	cl_Province
target		:province/{country}/{name} a :Province ; :provinceName {name} ; :provincePopulation {population} ; :provinceArea {area} . 
source		select name,country, population, area from province

mappingId	op_provinceHasCapital
target		:province/{country}/{name} :provinceHasCapital :city/{country}/{name}/{capital} . 
source		select name,country,capital from province

mappingId	op_countryHasCapital
target		:country/{code} :countryHasCapital :city/{code}/{province}/{capital} . 
source		select code, capital,province from country

mappingId	op_provinceInCountry
target		:province/{country}/{name} :provinceInCountry :country/{country} . 
source		select name,country from province

mappingId	cl_Lake
target		:lake/{name} a :Lake ; :waterName {name} ; :lakeDepth {depth} ; :lakeArea {area} ; :lakeRiver {river} ; :waterType "Lake"^^xsd:string . 
source		select name, depth, area, river
			from lake

mappingId	op_lakeInProvince
target		:lake/{lake} :lakeInProvince :province/{country}/{province} . 
source		select lake,country,province
			from geo_lake

mappingId	cl_River
target		:river/{name} a :River ; :waterName {name} ; :riverLength {length} ; :riverSourceCoo {source} ; :riverEstuaryCoo {estuary} ; :riverMountains {mountains} ; :riverSourceAltitude {sourcealtitude} ; :waterType "River"^^xsd:string . 
source		select name, length, source, estuary, mountains, sourcealtitude
			from river

mappingId	op_riverInProvince
target		:river/{river} :riverInProvince :province/{country}/{province} . 
source		select river,country,province
			from geo_river

mappingId	op_encompass1
target		:encompass/{country}/{continent} :encompass1 :country/{country} . 
source		select country, continent, percentage
			from encompasses

mappingId	op_encompass2
target		:encompass/{country}/{continent} :encompass2 :continent/{continent} . 
source		select country, continent, percentage
			from encompasses

mappingId	cl_encompass
target		:encompass/{country}/{continent} a :Encompass ; :encompassPercentage {percentage} . 
source		select country, continent, percentage
			from encompasses

mappingId	cl_Language
target		:language/{country}/{name} a :Language ; :languageName {name} ; :languagePercentage {percentage} . 
source		select country, name, percentage
			from language

mappingId	op_languageCountry
target		:language/{country}/{name} :languageCountry :country/{country} . 
source		select country, name
			from language

mappingId	cl_Continent
target		:continent/{name} a :Continent ; :continentName {name} ; :continentArea {area} . 
source		select name, area
			from continent

mappingId	cl_Politics
target		:politics/{country} a :Politics ; :politicsIndDate {independence} ; :politicsDepCountry {dependent} ; :politicsGovernment {government} . 
source		select country, independence, dependent, government
			from politics

mappingId	cl_Border
target		:border/{country1}/{country2} a :Border ; :borderLength {length} . 
source		select country1, country2, length
			from borders

mappingId	cl_Economy
target		:economy/{country} a :Economy ; :economyGdp {gdp} ; :economyAgriculture {agriculture} ; :economyService {service} ; :economyIndustry {industry} ; :economyInflation {inflation} . 
source		select country, gdp, agriculture, service, industry, inflation
			from economy

mappingId	cl_Island
target		:island/{name} a :Island ; :surfaceName {name} ; :islandIslands {islands} ; :islandArea {area} ; :islandHeight {height} ; :islandType {type} ; :surfaceType "Island"^^xsd:string . 
source		select name, islands, area, height, type
			from island

mappingId	cl_Desert
target		:desert/{name} a :Desert ; :surfaceName {name} ; :desertArea {area} ; :surfaceType "Desert"^^xsd:string . 
source		select name, area
			from desert

mappingId	cl_Sea
target		:sea/{name} a :Sea ; :waterName {name} ; :seaDepth {depth} ; :waterType "Sea"^^xsd:string . 
source		select name, depth
			from sea

mappingId	cl_Organization
target		:organization/{abbreviation} a :Organization ; :organizationAbbreviation {abbreviation} ; :organizationName {name} ; :organizationEstablished {established} . 
source		select abbreviation, name, established
			from organization

mappingId	cl_EthnicGroup
target		:ethnicgroup/{country}/{name} a :EthnicGroup ; :ethnicGroupName {name} ; :ethnicGroupPercentage {percentage} . 
source		select country, name, percentage
			from ethnicgroup

mappingId	cl_Religion
target		:religion/{country}/{name} a :Religion ; :religionName {name} ; :religionPercentage {percentage} . 
source		select country, name, percentage
			from religion

mappingId	cl_Mountain
target		:mountain/{name} a :Mountain ; :surfaceName {name} ; :mountainHeight {height} ; :mountainType {type} ; :surfaceType "Mountain"^^xsd:string . 
source		select name, height, type
			from mountain

mappingId	op_governmentInCountry
target		:politics/{country} :governmentInCountry :country/{country} . 
source		select country
			from politics

mappingId	op_economyInCountry
target		:economy/{country} :economyInCountry :country/{country} . 
source		select country
			from economy

mappingId	cl_Member
target		:member/{organization}/{country} a :Member ; :memberType {type} . 
source		select country, organization, type
			from isMember

mappingId	op_memberCountry
target		:member/{organization}/{country} :memberCountry :country/{country} . 
source		select country, organization
			from isMember

mappingId	op_memberOrganization
target		:member/{organization}/{country} :memberOrganization :organization/{organization} . 
source		select organization, country
			from isMember

mappingId	op_seaInProvince
target		:sea/{sea} :seaInProvince :province/{country}/{province} . 
source		select sea,country,province
			from geo_sea

mappingId	op_mountainInProvince
target		:mountain/{mountain} :mountainInProvince :province/{country}/{province} . 
source		select mountain,country,province
			from geo_mountain

mappingId	op_islandInProvince
target		:island/{island} :islandInProvince :province/{country}/{province} . 
source		select island,country,province
			from geo_island

mappingId	op_desertInProvince
target		:desert/{desert} :desertInProvince :province/{country}/{province} . 
source		select desert,country,province
			from geo_desert

mappingId	op_riverFlowsToRiver
target		:river/{name} :riverFlowsToRiver :river/{river} . 
source		select name, river
			from river

mappingId	op_riverFlowsToLake
target		:river/{name} :riverFlowsToLake :lake/{lake} . 
source		select name, lake
			from river

mappingId	op_riverFlowsToLake(0)
target		:river/{name} :riverFlowsToLake :sea/{sea} . 
source		select name, sea
			from river

mappingId	op_religionInCountry
target		:religion/{country}/{name} :religionInCountry :country/{country} . 
source		select name, country
			from religion

mappingId	op_border1
target		:border/{country1}/{country2} :border1 :country/{country1} . 
source		select country1, country2
			from borders

mappingId	op_border2
target		:border/{country1}/{country2} :border2 :country/{country2} . 
source		select country1, country2
			from borders

mappingId	cl_encompass(0)
target		:border/{country1}/{country2} a :Border . 
source		select country1, country2
			from borders
]]

